//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace JA.Attack
{
	/// <summary>
	/// DomainRelationship Flow
	/// Description for JA.Attack.Flow
	/// </summary>
	[DslDesign::DisplayNameResource("JA.Attack.Flow.DisplayName", typeof(global::JA.Attack.AttackDomainModel), "JA.Attack.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("JA.Attack.Flow.Description", typeof(global::JA.Attack.AttackDomainModel), "JA.Attack.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::JA.Attack.AttackDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("83e5e972-7540-495f-a803-7116624a13f7")]
	public partial class Flow : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// Flow domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x83e5e972, 0x7540, 0x495f, 0xa8, 0x03, 0x71, 0x16, 0x62, 0x4a, 0x13, 0xf7);
	
				
		/// <summary>
		/// Constructor
		/// Creates a Flow link in the same Partition as the given FlowElement
		/// </summary>
		/// <param name="source">FlowElement to use as the source of the relationship.</param>
		/// <param name="target">FlowElement to use as the target of the relationship.</param>
		public Flow(FlowElement source, FlowElement target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(Flow.FlowFromDomainRoleId, source), new DslModeling::RoleAssignment(Flow.FlowToDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public Flow(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public Flow(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public Flow(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public Flow(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region FlowFrom domain role code
		
		/// <summary>
		/// FlowFrom domain role Id.
		/// </summary>
		public static readonly global::System.Guid FlowFromDomainRoleId = new global::System.Guid(0x4b9e2e55, 0xa750, 0x45c5, 0x91, 0x82, 0x2d, 0x7c, 0x5f, 0x8b, 0x94, 0xe8);
		
		/// <summary>
		/// DomainRole FlowFrom
		/// Description for JA.Attack.Flow.FlowFrom
		/// </summary>
		[DslDesign::DisplayNameResource("JA.Attack.Flow/FlowFrom.DisplayName", typeof(global::JA.Attack.AttackDomainModel), "JA.Attack.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("JA.Attack.Flow/FlowFrom.Description", typeof(global::JA.Attack.AttackDomainModel), "JA.Attack.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "FlowTo", PropertyDisplayNameKey="JA.Attack.Flow/FlowFrom.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("4b9e2e55-a750-45c5-9182-2d7c5f8b94e8")]
		public virtual FlowElement FlowFrom
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (FlowElement)DslModeling::DomainRoleInfo.GetRolePlayer(this, FlowFromDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, FlowFromDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access FlowFrom of a FlowElement
		/// <summary>
		/// Gets a list of FlowFrom.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<FlowElement> GetFlowFrom(FlowElement element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<FlowElement>, FlowElement>(element, FlowToDomainRoleId);
		}
		#endregion
		#region FlowTo domain role code
		
		/// <summary>
		/// FlowTo domain role Id.
		/// </summary>
		public static readonly global::System.Guid FlowToDomainRoleId = new global::System.Guid(0x4a941d16, 0x48b7, 0x437a, 0x98, 0xc5, 0x9d, 0x5d, 0x81, 0x47, 0x22, 0x0a);
		
		/// <summary>
		/// DomainRole FlowTo
		/// Description for JA.Attack.Flow.FlowTo
		/// </summary>
		[DslDesign::DisplayNameResource("JA.Attack.Flow/FlowTo.DisplayName", typeof(global::JA.Attack.AttackDomainModel), "JA.Attack.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("JA.Attack.Flow/FlowTo.Description", typeof(global::JA.Attack.AttackDomainModel), "JA.Attack.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "FlowFrom", PropertyDisplayNameKey="JA.Attack.Flow/FlowTo.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("4a941d16-48b7-437a-98c5-9d5d8147220a")]
		public virtual FlowElement FlowTo
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (FlowElement)DslModeling::DomainRoleInfo.GetRolePlayer(this, FlowToDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, FlowToDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access FlowTo of a FlowElement
		/// <summary>
		/// Gets a list of FlowTo.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<FlowElement> GetFlowTo(FlowElement element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<FlowElement>, FlowElement>(element, FlowFromDomainRoleId);
		}
		#endregion
		#region FlowFrom link accessor
		/// <summary>
		/// Get the list of Flow links to a FlowElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::JA.Attack.Flow> GetLinksToFlowTo ( global::JA.Attack.FlowElement flowFromInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::JA.Attack.Flow>(flowFromInstance, global::JA.Attack.Flow.FlowFromDomainRoleId);
		}
		#endregion
		#region FlowTo link accessor
		/// <summary>
		/// Get the list of Flow links to a FlowElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::JA.Attack.Flow> GetLinksToFlowFrom ( global::JA.Attack.FlowElement flowToInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::JA.Attack.Flow>(flowToInstance, global::JA.Attack.Flow.FlowToDomainRoleId);
		}
		#endregion
		#region Flow instance accessors
		
		/// <summary>
		/// Get any Flow links between a given FlowElement and a FlowElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::JA.Attack.Flow> GetLinks( global::JA.Attack.FlowElement source, global::JA.Attack.FlowElement target )
		{
			global::System.Collections.Generic.List<global::JA.Attack.Flow> outLinks = new global::System.Collections.Generic.List<global::JA.Attack.Flow>();
			global::System.Collections.Generic.IList<global::JA.Attack.Flow> links = DslModeling::DomainRoleInfo.GetElementLinks<global::JA.Attack.Flow>(source, global::JA.Attack.Flow.FlowFromDomainRoleId);
			foreach ( global::JA.Attack.Flow link in links )
			{
				if ( target.Equals(link.FlowTo) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one Flow link between a given FlowElementand a FlowElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::JA.Attack.Flow GetLink( global::JA.Attack.FlowElement source, global::JA.Attack.FlowElement target )
		{
			global::System.Collections.Generic.IList<global::JA.Attack.Flow> links = DslModeling::DomainRoleInfo.GetElementLinks<global::JA.Attack.Flow>(source, global::JA.Attack.Flow.FlowFromDomainRoleId);
			foreach ( global::JA.Attack.Flow link in links )
			{
				if ( target.Equals(link.FlowTo) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace JA.Attack
{
	/// <summary>
	/// DomainRelationship AttackGraphHasFlowElements
	/// Description for JA.Attack.AttackGraphHasFlowElements
	/// </summary>
	[DslDesign::DisplayNameResource("JA.Attack.AttackGraphHasFlowElements.DisplayName", typeof(global::JA.Attack.AttackDomainModel), "JA.Attack.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("JA.Attack.AttackGraphHasFlowElements.Description", typeof(global::JA.Attack.AttackDomainModel), "JA.Attack.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::JA.Attack.AttackDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("8610d0f4-24c4-4870-b040-9192c4bcd239")]
	public partial class AttackGraphHasFlowElements : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// AttackGraphHasFlowElements domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x8610d0f4, 0x24c4, 0x4870, 0xb0, 0x40, 0x91, 0x92, 0xc4, 0xbc, 0xd2, 0x39);
	
				
		/// <summary>
		/// Constructor
		/// Creates a AttackGraphHasFlowElements link in the same Partition as the given AttackGraph
		/// </summary>
		/// <param name="source">AttackGraph to use as the source of the relationship.</param>
		/// <param name="target">FlowElement to use as the target of the relationship.</param>
		public AttackGraphHasFlowElements(AttackGraph source, FlowElement target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(AttackGraphHasFlowElements.AttackGraphDomainRoleId, source), new DslModeling::RoleAssignment(AttackGraphHasFlowElements.FlowElementDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public AttackGraphHasFlowElements(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public AttackGraphHasFlowElements(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public AttackGraphHasFlowElements(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public AttackGraphHasFlowElements(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region AttackGraph domain role code
		
		/// <summary>
		/// AttackGraph domain role Id.
		/// </summary>
		public static readonly global::System.Guid AttackGraphDomainRoleId = new global::System.Guid(0x14df650c, 0xbae8, 0x4d16, 0x88, 0xb2, 0xe4, 0x35, 0x85, 0x9a, 0xe1, 0x4e);
		
		/// <summary>
		/// DomainRole AttackGraph
		/// Description for JA.Attack.AttackGraphHasFlowElements.AttackGraph
		/// </summary>
		[DslDesign::DisplayNameResource("JA.Attack.AttackGraphHasFlowElements/AttackGraph.DisplayName", typeof(global::JA.Attack.AttackDomainModel), "JA.Attack.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("JA.Attack.AttackGraphHasFlowElements/AttackGraph.Description", typeof(global::JA.Attack.AttackDomainModel), "JA.Attack.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "FlowElements", PropertyDisplayNameKey="JA.Attack.AttackGraphHasFlowElements/AttackGraph.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("14df650c-bae8-4d16-88b2-e435859ae14e")]
		public virtual AttackGraph AttackGraph
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (AttackGraph)DslModeling::DomainRoleInfo.GetRolePlayer(this, AttackGraphDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, AttackGraphDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access AttackGraph of a FlowElement
		/// <summary>
		/// Gets AttackGraph.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static AttackGraph GetAttackGraph(FlowElement element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, FlowElementDomainRoleId) as AttackGraph;
		}
		
		/// <summary>
		/// Sets AttackGraph.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetAttackGraph(FlowElement element, AttackGraph newAttackGraph)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, FlowElementDomainRoleId, newAttackGraph);
		}
		#endregion
		#region FlowElement domain role code
		
		/// <summary>
		/// FlowElement domain role Id.
		/// </summary>
		public static readonly global::System.Guid FlowElementDomainRoleId = new global::System.Guid(0xb8813faa, 0x05b3, 0x404a, 0xac, 0xd4, 0x29, 0x0d, 0x7d, 0xe6, 0xf6, 0x5a);
		
		/// <summary>
		/// DomainRole FlowElement
		/// Description for JA.Attack.AttackGraphHasFlowElements.FlowElement
		/// </summary>
		[DslDesign::DisplayNameResource("JA.Attack.AttackGraphHasFlowElements/FlowElement.DisplayName", typeof(global::JA.Attack.AttackDomainModel), "JA.Attack.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("JA.Attack.AttackGraphHasFlowElements/FlowElement.Description", typeof(global::JA.Attack.AttackDomainModel), "JA.Attack.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "AttackGraph", PropertyDisplayNameKey="JA.Attack.AttackGraphHasFlowElements/FlowElement.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("b8813faa-05b3-404a-acd4-290d7de6f65a")]
		public virtual FlowElement FlowElement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (FlowElement)DslModeling::DomainRoleInfo.GetRolePlayer(this, FlowElementDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, FlowElementDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access FlowElements of a AttackGraph
		/// <summary>
		/// Gets a list of FlowElements.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<FlowElement> GetFlowElements(AttackGraph element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<FlowElement>, FlowElement>(element, AttackGraphDomainRoleId);
		}
		#endregion
		#region AttackGraph link accessor
		/// <summary>
		/// Get the list of AttackGraphHasFlowElements links to a AttackGraph.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::JA.Attack.AttackGraphHasFlowElements> GetLinksToFlowElements ( global::JA.Attack.AttackGraph attackGraphInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::JA.Attack.AttackGraphHasFlowElements>(attackGraphInstance, global::JA.Attack.AttackGraphHasFlowElements.AttackGraphDomainRoleId);
		}
		#endregion
		#region FlowElement link accessor
		/// <summary>
		/// Get the AttackGraphHasFlowElements link to a FlowElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::JA.Attack.AttackGraphHasFlowElements GetLinkToAttackGraph (global::JA.Attack.FlowElement flowElementInstance)
		{
			global::System.Collections.Generic.IList<global::JA.Attack.AttackGraphHasFlowElements> links = DslModeling::DomainRoleInfo.GetElementLinks<global::JA.Attack.AttackGraphHasFlowElements>(flowElementInstance, global::JA.Attack.AttackGraphHasFlowElements.FlowElementDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of FlowElement not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region AttackGraphHasFlowElements instance accessors
		
		/// <summary>
		/// Get any AttackGraphHasFlowElements links between a given AttackGraph and a FlowElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::JA.Attack.AttackGraphHasFlowElements> GetLinks( global::JA.Attack.AttackGraph source, global::JA.Attack.FlowElement target )
		{
			global::System.Collections.Generic.List<global::JA.Attack.AttackGraphHasFlowElements> outLinks = new global::System.Collections.Generic.List<global::JA.Attack.AttackGraphHasFlowElements>();
			global::System.Collections.Generic.IList<global::JA.Attack.AttackGraphHasFlowElements> links = DslModeling::DomainRoleInfo.GetElementLinks<global::JA.Attack.AttackGraphHasFlowElements>(source, global::JA.Attack.AttackGraphHasFlowElements.AttackGraphDomainRoleId);
			foreach ( global::JA.Attack.AttackGraphHasFlowElements link in links )
			{
				if ( target.Equals(link.FlowElement) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one AttackGraphHasFlowElements link between a given AttackGraphand a FlowElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::JA.Attack.AttackGraphHasFlowElements GetLink( global::JA.Attack.AttackGraph source, global::JA.Attack.FlowElement target )
		{
			global::System.Collections.Generic.IList<global::JA.Attack.AttackGraphHasFlowElements> links = DslModeling::DomainRoleInfo.GetElementLinks<global::JA.Attack.AttackGraphHasFlowElements>(source, global::JA.Attack.AttackGraphHasFlowElements.AttackGraphDomainRoleId);
			foreach ( global::JA.Attack.AttackGraphHasFlowElements link in links )
			{
				if ( target.Equals(link.FlowElement) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace JA.Attack
{
	/// <summary>
	/// DomainRelationship TaskHasPreConditions
	/// Description for JA.Attack.TaskHasPreConditions
	/// </summary>
	[DslDesign::DisplayNameResource("JA.Attack.TaskHasPreConditions.DisplayName", typeof(global::JA.Attack.AttackDomainModel), "JA.Attack.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("JA.Attack.TaskHasPreConditions.Description", typeof(global::JA.Attack.AttackDomainModel), "JA.Attack.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::JA.Attack.AttackDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("f5d7a24b-0b2a-464e-87aa-107610404551")]
	public partial class TaskHasPreConditions : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// TaskHasPreConditions domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xf5d7a24b, 0x0b2a, 0x464e, 0x87, 0xaa, 0x10, 0x76, 0x10, 0x40, 0x45, 0x51);
	
				
		/// <summary>
		/// Constructor
		/// Creates a TaskHasPreConditions link in the same Partition as the given Task
		/// </summary>
		/// <param name="source">Task to use as the source of the relationship.</param>
		/// <param name="target">Condition to use as the target of the relationship.</param>
		public TaskHasPreConditions(Task source, Condition target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(TaskHasPreConditions.TaskDomainRoleId, source), new DslModeling::RoleAssignment(TaskHasPreConditions.ConditionDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public TaskHasPreConditions(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public TaskHasPreConditions(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public TaskHasPreConditions(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public TaskHasPreConditions(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Task domain role code
		
		/// <summary>
		/// Task domain role Id.
		/// </summary>
		public static readonly global::System.Guid TaskDomainRoleId = new global::System.Guid(0x2437a1be, 0xefa5, 0x4e8a, 0xb4, 0x75, 0xfb, 0x3d, 0xb4, 0xd7, 0xab, 0x1f);
		
		/// <summary>
		/// DomainRole Task
		/// Description for JA.Attack.TaskHasPreConditions.Task
		/// </summary>
		[DslDesign::DisplayNameResource("JA.Attack.TaskHasPreConditions/Task.DisplayName", typeof(global::JA.Attack.AttackDomainModel), "JA.Attack.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("JA.Attack.TaskHasPreConditions/Task.Description", typeof(global::JA.Attack.AttackDomainModel), "JA.Attack.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Conditioned", PropertyDisplayNameKey="JA.Attack.TaskHasPreConditions/Task.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("2437a1be-efa5-4e8a-b475-fb3db4d7ab1f")]
		public virtual Task Task
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Task)DslModeling::DomainRoleInfo.GetRolePlayer(this, TaskDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TaskDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Task of a Condition
		/// <summary>
		/// Gets Task.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Task GetTask(Condition element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ConditionDomainRoleId) as Task;
		}
		
		/// <summary>
		/// Sets Task.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetTask(Condition element, Task newTask)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ConditionDomainRoleId, newTask);
		}
		#endregion
		#region Condition domain role code
		
		/// <summary>
		/// Condition domain role Id.
		/// </summary>
		public static readonly global::System.Guid ConditionDomainRoleId = new global::System.Guid(0x6286862b, 0x4cbd, 0x456b, 0xa0, 0x33, 0xa0, 0x29, 0x3e, 0xe7, 0xb3, 0xc6);
		
		/// <summary>
		/// DomainRole Condition
		/// Description for JA.Attack.TaskHasPreConditions.Condition
		/// </summary>
		[DslDesign::DisplayNameResource("JA.Attack.TaskHasPreConditions/Condition.DisplayName", typeof(global::JA.Attack.AttackDomainModel), "JA.Attack.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("JA.Attack.TaskHasPreConditions/Condition.Description", typeof(global::JA.Attack.AttackDomainModel), "JA.Attack.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Task", PropertyDisplayNameKey="JA.Attack.TaskHasPreConditions/Condition.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("6286862b-4cbd-456b-a033-a0293ee7b3c6")]
		public virtual Condition Condition
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Condition)DslModeling::DomainRoleInfo.GetRolePlayer(this, ConditionDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ConditionDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Conditioned of a Task
		/// <summary>
		/// Gets a list of Conditioned.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Condition> GetConditioned(Task element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Condition>, Condition>(element, TaskDomainRoleId);
		}
		#endregion
		#region Task link accessor
		/// <summary>
		/// Get the list of TaskHasPreConditions links to a Task.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::JA.Attack.TaskHasPreConditions> GetLinksToConditioned ( global::JA.Attack.Task taskInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::JA.Attack.TaskHasPreConditions>(taskInstance, global::JA.Attack.TaskHasPreConditions.TaskDomainRoleId);
		}
		#endregion
		#region Condition link accessor
		/// <summary>
		/// Get the TaskHasPreConditions link to a Condition.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::JA.Attack.TaskHasPreConditions GetLinkToTask (global::JA.Attack.Condition conditionInstance)
		{
			global::System.Collections.Generic.IList<global::JA.Attack.TaskHasPreConditions> links = DslModeling::DomainRoleInfo.GetElementLinks<global::JA.Attack.TaskHasPreConditions>(conditionInstance, global::JA.Attack.TaskHasPreConditions.ConditionDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Condition not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region TaskHasPreConditions instance accessors
		
		/// <summary>
		/// Get any TaskHasPreConditions links between a given Task and a Condition.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::JA.Attack.TaskHasPreConditions> GetLinks( global::JA.Attack.Task source, global::JA.Attack.Condition target )
		{
			global::System.Collections.Generic.List<global::JA.Attack.TaskHasPreConditions> outLinks = new global::System.Collections.Generic.List<global::JA.Attack.TaskHasPreConditions>();
			global::System.Collections.Generic.IList<global::JA.Attack.TaskHasPreConditions> links = DslModeling::DomainRoleInfo.GetElementLinks<global::JA.Attack.TaskHasPreConditions>(source, global::JA.Attack.TaskHasPreConditions.TaskDomainRoleId);
			foreach ( global::JA.Attack.TaskHasPreConditions link in links )
			{
				if ( target.Equals(link.Condition) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one TaskHasPreConditions link between a given Taskand a Condition.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::JA.Attack.TaskHasPreConditions GetLink( global::JA.Attack.Task source, global::JA.Attack.Condition target )
		{
			global::System.Collections.Generic.IList<global::JA.Attack.TaskHasPreConditions> links = DslModeling::DomainRoleInfo.GetElementLinks<global::JA.Attack.TaskHasPreConditions>(source, global::JA.Attack.TaskHasPreConditions.TaskDomainRoleId);
			foreach ( global::JA.Attack.TaskHasPreConditions link in links )
			{
				if ( target.Equals(link.Condition) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace JA.Attack
{
	/// <summary>
	/// DomainRelationship StateHasPostConditions
	/// Description for JA.Attack.StateHasPostConditions
	/// </summary>
	[DslDesign::DisplayNameResource("JA.Attack.StateHasPostConditions.DisplayName", typeof(global::JA.Attack.AttackDomainModel), "JA.Attack.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("JA.Attack.StateHasPostConditions.Description", typeof(global::JA.Attack.AttackDomainModel), "JA.Attack.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::JA.Attack.AttackDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("804eb990-51b8-4010-98d9-3f718ea68f6b")]
	public partial class StateHasPostConditions : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// StateHasPostConditions domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x804eb990, 0x51b8, 0x4010, 0x98, 0xd9, 0x3f, 0x71, 0x8e, 0xa6, 0x8f, 0x6b);
	
				
		/// <summary>
		/// Constructor
		/// Creates a StateHasPostConditions link in the same Partition as the given State
		/// </summary>
		/// <param name="source">State to use as the source of the relationship.</param>
		/// <param name="target">Condition to use as the target of the relationship.</param>
		public StateHasPostConditions(State source, Condition target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(StateHasPostConditions.StateDomainRoleId, source), new DslModeling::RoleAssignment(StateHasPostConditions.ConditionDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public StateHasPostConditions(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public StateHasPostConditions(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public StateHasPostConditions(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public StateHasPostConditions(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region State domain role code
		
		/// <summary>
		/// State domain role Id.
		/// </summary>
		public static readonly global::System.Guid StateDomainRoleId = new global::System.Guid(0xd8cb1665, 0x6ef9, 0x46fb, 0xa5, 0x17, 0xac, 0x48, 0x09, 0x58, 0x83, 0xc7);
		
		/// <summary>
		/// DomainRole State
		/// Description for JA.Attack.StateHasPostConditions.State
		/// </summary>
		[DslDesign::DisplayNameResource("JA.Attack.StateHasPostConditions/State.DisplayName", typeof(global::JA.Attack.AttackDomainModel), "JA.Attack.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("JA.Attack.StateHasPostConditions/State.Description", typeof(global::JA.Attack.AttackDomainModel), "JA.Attack.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Conditioned", PropertyDisplayNameKey="JA.Attack.StateHasPostConditions/State.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("d8cb1665-6ef9-46fb-a517-ac48095883c7")]
		public virtual State State
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (State)DslModeling::DomainRoleInfo.GetRolePlayer(this, StateDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, StateDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access State of a Condition
		/// <summary>
		/// Gets State.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static State GetState(Condition element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ConditionDomainRoleId) as State;
		}
		
		/// <summary>
		/// Sets State.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetState(Condition element, State newState)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ConditionDomainRoleId, newState);
		}
		#endregion
		#region Condition domain role code
		
		/// <summary>
		/// Condition domain role Id.
		/// </summary>
		public static readonly global::System.Guid ConditionDomainRoleId = new global::System.Guid(0x34512374, 0x514d, 0x4540, 0x99, 0x1d, 0x6b, 0xcf, 0x06, 0x01, 0x72, 0x5a);
		
		/// <summary>
		/// DomainRole Condition
		/// Description for JA.Attack.StateHasPostConditions.Condition
		/// </summary>
		[DslDesign::DisplayNameResource("JA.Attack.StateHasPostConditions/Condition.DisplayName", typeof(global::JA.Attack.AttackDomainModel), "JA.Attack.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("JA.Attack.StateHasPostConditions/Condition.Description", typeof(global::JA.Attack.AttackDomainModel), "JA.Attack.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "State", PropertyDisplayNameKey="JA.Attack.StateHasPostConditions/Condition.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("34512374-514d-4540-991d-6bcf0601725a")]
		public virtual Condition Condition
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Condition)DslModeling::DomainRoleInfo.GetRolePlayer(this, ConditionDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ConditionDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Conditioned of a State
		/// <summary>
		/// Gets a list of Conditioned.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Condition> GetConditioned(State element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Condition>, Condition>(element, StateDomainRoleId);
		}
		#endregion
		#region State link accessor
		/// <summary>
		/// Get the list of StateHasPostConditions links to a State.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::JA.Attack.StateHasPostConditions> GetLinksToConditioned ( global::JA.Attack.State stateInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::JA.Attack.StateHasPostConditions>(stateInstance, global::JA.Attack.StateHasPostConditions.StateDomainRoleId);
		}
		#endregion
		#region Condition link accessor
		/// <summary>
		/// Get the StateHasPostConditions link to a Condition.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::JA.Attack.StateHasPostConditions GetLinkToState (global::JA.Attack.Condition conditionInstance)
		{
			global::System.Collections.Generic.IList<global::JA.Attack.StateHasPostConditions> links = DslModeling::DomainRoleInfo.GetElementLinks<global::JA.Attack.StateHasPostConditions>(conditionInstance, global::JA.Attack.StateHasPostConditions.ConditionDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Condition not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region StateHasPostConditions instance accessors
		
		/// <summary>
		/// Get any StateHasPostConditions links between a given State and a Condition.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::JA.Attack.StateHasPostConditions> GetLinks( global::JA.Attack.State source, global::JA.Attack.Condition target )
		{
			global::System.Collections.Generic.List<global::JA.Attack.StateHasPostConditions> outLinks = new global::System.Collections.Generic.List<global::JA.Attack.StateHasPostConditions>();
			global::System.Collections.Generic.IList<global::JA.Attack.StateHasPostConditions> links = DslModeling::DomainRoleInfo.GetElementLinks<global::JA.Attack.StateHasPostConditions>(source, global::JA.Attack.StateHasPostConditions.StateDomainRoleId);
			foreach ( global::JA.Attack.StateHasPostConditions link in links )
			{
				if ( target.Equals(link.Condition) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one StateHasPostConditions link between a given Stateand a Condition.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::JA.Attack.StateHasPostConditions GetLink( global::JA.Attack.State source, global::JA.Attack.Condition target )
		{
			global::System.Collections.Generic.IList<global::JA.Attack.StateHasPostConditions> links = DslModeling::DomainRoleInfo.GetElementLinks<global::JA.Attack.StateHasPostConditions>(source, global::JA.Attack.StateHasPostConditions.StateDomainRoleId);
			foreach ( global::JA.Attack.StateHasPostConditions link in links )
			{
				if ( target.Equals(link.Condition) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
